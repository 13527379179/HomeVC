//
//
//    Howie  2017.
//
//
//
/*********************************************************
 
 ✞ 自己搜集的比较有用的宏定义
 
 *********************************************************/



//只在OC中编译
#ifdef __OBJC__


#import "XHHColor.h"
#import "UIView+Frame.h"


//%s 打印的是C标准的字符串  (函数名应该是C标准的字符串)
#define XHHLogFunc NSLog(@"%s",__func__);
#ifdef DEBUG
#define XHHLog(...) NSLog(__VA_ARGS__);
#else
#define XHHLog(...)
#endif







/*************************颜色********************************/
//记得带括号,因为有可能因为计算顺序导致的bug

//有透明度
#define XHHColorA(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)/255.0]
//透明为1
#define XHHColor(r,g,b) XHHColorA(r,g,b,255)

//随机色
#define XHHRandomColor XHHColor(arc4random_uniform(255), arc4random_uniform(255), arc4random_uniform(255))
//灰色,也就是三色相同
#define XHHrayColor(value) XHHColor((value), (value), (value))

//默认背景颜色,这个根据项目不同,随机调整
#define XHHCommonBgColor XHHrayColor(240)

//弱引用,用在block中防止循环引用
#define XHHWeakSelf __weak typeof(self) weakSelf = self;


//屏幕尺寸
#define XHHScreenH [UIScreen mainScreen].bounds.size.height
#define XHHScreenW [UIScreen mainScreen].bounds.size.width
#define XHHScreenRate (XHHScreenW)/(375)




/*************************大牛自己的宏定义********************************/


//屏幕宽高
#define iphone4_height 480.0f
#define iphone5_height 568.0f
#define iphone6_height 667.0f
#define iphone6p_height 736.0f

#define iphone4_width 320.0f
#define iphone5_width 320.0f
#define iphone6_width 375.0f
#define iphone6p_width 414.0f

#define NAVI_HEIGHT 64.0f
#define nav_Height 64.0f
#define tabBar_Height 49.0f
#define TABBAR_HEIGHT 49.0f

#define SYRealValue(value) ((value)/375*[UIScreen mainScreen].bounds.size.width)
#define SizeScale (SCREEN_WIDTH != 375 ? 1 : 1.2)

#define kFont(value) [UIFont systemFontOfSize:value * SizeScale]

//动态获取文字的size
#define GET_TEXT_SIZE(width,text,font) [text boundingRectWithSize:CGSizeMake(width,MAXFLOST) options:\
NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:font]} context:nil].size
/// UUID
#define UUID [[[UIDevice currentDevice] identifierForVendor] UUIDString]



//获取通知中心
#define LHCNotificationCenter [NSNotificationCenter defaultCenter]

//强引用、弱引用
#define LHCWeakSelf(type) _weak typeof(type) weak##type=type
#define LHCStrongSelf(type) _strong typeof(type) type =weak##type

//设置圆角跟边框
#define LHCViewBorderRadius(View,Radius,Width,Color)\
\
[View.layer setCornerRadius:(Radius)];\
[View.layer setMaskToBounds(YES)];\
[View.layer setBorderWidth:(Width)];\
[View.layer setBorderColor:(Color CGColor)];\

#define screenW [UIScreen mainScreen].bounds.size.width
#define screenH [UIScreen mainScreen].bounds.size.height

//由角度转换弧度 由弧度转换角度
#define LHCDegressToRadian(x) (M_PI *(x)/180.0)
#define LHCRadianToDegress(radian) (radian*180.0)/(M_PI)


//删除本地对象
#define Delete(key) [[NSUserDefaults standardUserDefaults] removeObjectForKey:key]; [[NSUserDefaults standardUserDefaults] synchronize];

//获取本地对象（系统）
#define Obj(key) [[NSUserDefaults standardUserDefaults] objectForKey:key]


#pragma mark -获取当前的iPhone 设备/系统版本
//判断是否为iPhone
#define IS_IPHONE (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)

//判断是否为iPad
#define IS_IPAD (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)

//判断是否为ipod
#define IS_IPOD ([[[UIDevice currentDevice] model] isEqualToString:@"iPod touch"])

// 判断是否为 iPhone 5SE
#define iPhone5SE [[UIScreen mainScreen] bounds].size.width == 320.0f && [[UIScreen mainScreen] bounds].size.height == 568.0f

// 判断是否为iPhone 6/6s
#define iPhone6_6s [[UIScreen mainScreen] bounds].size.width == 375.0f && [[UIScreen mainScreen] bounds].size.height == 667.0f

// 判断是否为iPhone 6Plus/6sPlus
#define iPhone6Plus_6sPlus [[UIScreen mainScreen] bounds].size.width == 414.0f && [[UIScreen mainScreen] bounds].size.height == 736.0f

//获取系统版本
#define IOS_SYSTEM_VERSION [[[UIDevice currentDevice] systemVersion] floatValue]

//判断 iOS 8 或更高的系统版本
#define IOS_VERSION_8_OR_LATER (([[[UIDevice currentDevice] systemVersion] floatValue] >=8.0)? (YES):(NO))

//所有可点击按钮的颜色都是相同的
#define ALLBTNCOLOR [UIColor colorWithRed:1.0/255.0 green:170.0/255.0 blue:238.0/255.0 alpha:1.0]

#pragma mark-判断是真机还是模拟器
#if TARGET_OS_IPHONE
//iPhone Device
#endif
#if TARGET_IPHONE_SIMULATOR
//iPhone Simulator
#endif

#pragma mark-沙盒目录文件
//获取temp
#define kPathTemp NSTemporaryDirectory()

//获取沙盒 Document
#define kPathDocument [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]

//获取沙盒 Cache
#define kPathCache [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]


#pragma mark -GCD
//GCD - 一次性执行
#define kDISPATCH_ONCE_BLOCK(onceBlock) static dispatch_once_t onceToken; dispatch_once(&onceToken, onceBlock);

//GCD - 在Main线程上运行
#define kDISPATCH_MAIN_THREAD(mainQueueBlock) dispatch_async(dispatch_get_main_queue(), mainQueueBlock);

//GCD - 开启异步线程
#define kDISPATCH_GLOBAL_QUEUE_DEFAULT(globalQueueBlock) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), globalQueueBlocl);
//安全使用block
#define SAFE_BLOCK(block) if (block) block

//字符串是否为空
#define kStringIsEmpty(str) ([str isKindOfClass:[NSNull class]] || str == nil || [str length] < 1 ? YES : NO )
//数组是否为空
#define kArrayIsEmpty(array) (array == nil || [array isKindOfClass:[NSNull class]] || array.count == 0)
//字典是否为空
#define kDictIsEmpty(dic) (dic == nil || [dic isKindOfClass:[NSNull class]] || dic.allKeys == 0)
//是否是空对象
#define kObjectIsEmpty(_object) (_object == nil \
|| [_object isKindOfClass:[NSNull class]] \
|| ([_object respondsToSelector:@selector(length)] && [(NSData *)_object length] == 0) \
|| ([_object respondsToSelector:@selector(count)] && [(NSArray *)_object count] == 0))

//是否为空或是[NSNull null]
#define NotNilAndNull(_ref) (((_ref) != nil) && (![(_ref) isEqual:[NSNull null]]))
#define IsNilOrNull(_ref) (((_ref) == nil) || ([(_ref) isEqual:[NSNull null]]))

//加载图片
#define imageRender(imageName) [[UIImage imageNamed:(imageName)] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]
#endif

//判断是否要Log 可以打印文件名 函数名 行数
#ifdef NEED_DEBUG
#define NSLog(format, ...) \
//Log定义...
#else
#define NSLog(format, ...) \
do { \
NSLog(@"<%@ : %d : %s>-: %@", \
[[NSString stringWithUTF8String:__FILE__] lastPathComponent], \
__LINE__, \
__FUNCTION__, \
[NSString stringWithFormat:format, ##__VA_ARGS__]); \
} while(0)
#endif

/// debug 模式 和release 模式下的打印
#ifdef DEBUG
#define LOG(...) NSLog(__VA_ARGS__)
#else
#define LOG(...)









#endif
